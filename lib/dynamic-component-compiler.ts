// Dynamic Component Compiler for AI-generated components
// This module handles compiling and registering React components generated by AI

import React from 'react';

export interface GeneratedComponent {
  type: string;
  category: string;
  props: Record<string, any>;
  code: string;
}

export interface CompiledComponent {
  type: string;
  component: React.ComponentType<any>;
  props: Record<string, any>;
}

// In-memory registry for dynamically compiled components
const dynamicComponentRegistry = new Map<string, React.ComponentType<any>>();

/**
 * Safely compiles a React component from code string using Babel
 */
export function compileComponent(code: string, componentName: string): React.ComponentType<any> | null {
  try {
    // Import Babel dynamically to avoid SSR issues
    const Babel = require('@babel/standalone');
    
    // Transform the code with Babel
    const transformedCode = Babel.transform(code, {
      presets: ['react'],
      filename: `${componentName}.tsx`,
    }).code;

    // Create a safe execution context with React globals
    const safeGlobals = {
      React: require('react'),
      useState: require('react').useState,
      useEffect: require('react').useEffect,
      useRef: require('react').useRef,
      useCallback: require('react').useCallback,
      useMemo: require('react').useMemo,
      forwardRef: require('react').forwardRef,
      memo: require('react').memo,
      Children: require('react').Children,
      Fragment: require('react').Fragment,
      // Add other React exports as needed
    };

    // Create a function that returns the component
    const createComponent = new Function(
      ...Object.keys(safeGlobals),
      `
        ${transformedCode}
        return ${componentName};
      `
    );

    // Execute the function with safe globals
    const Component = createComponent(...Object.values(safeGlobals));
    
    if (typeof Component === 'function') {
      return Component;
    }
    
    console.error('Compiled result is not a valid React component');
    return null;
  } catch (error) {
    console.error('Failed to compile component:', error);
    return null;
  }
}

/**
 * Registers a dynamically compiled component
 */
export function registerDynamicComponent(type: string, component: React.ComponentType<any>): void {
  dynamicComponentRegistry.set(type, component);
  console.log(`Registered dynamic component: ${type}`);
}

/**
 * Gets a dynamically compiled component by type
 */
export function getDynamicComponent(type: string): React.ComponentType<any> | undefined {
  return dynamicComponentRegistry.get(type);
}

/**
 * Checks if a component type is registered dynamically
 */
export function isDynamicComponent(type: string): boolean {
  return dynamicComponentRegistry.has(type);
}

/**
 * Compiles and registers a generated component
 */
export function compileAndRegisterComponent(generatedComponent: GeneratedComponent): boolean {
  const { type, code } = generatedComponent;
  
  // Convert kebab-case to PascalCase for component name
  const componentName = type
    .split('-')
    .map(s => s.charAt(0).toUpperCase() + s.slice(1))
    .join('');
  
  const compiledComponent = compileComponent(code, componentName);
  
  if (compiledComponent) {
    registerDynamicComponent(type, compiledComponent);
    return true;
  }
  
  return false;
}

/**
 * Creates a fallback component for failed compilations
 */
export function createFallbackComponent(type: string, code: string): React.ComponentType<any> {
  return function FallbackComponent(props: any) {
    return React.createElement('div', {
      className: "p-6 bg-yellow-500/20 border border-yellow-500/50 rounded-lg m-4"
    }, [
      React.createElement('div', {
        key: 'header',
        className: "flex items-center gap-2 mb-3"
      }, [
        React.createElement('div', {
          key: 'pulse',
          className: "w-3 h-3 bg-yellow-500 rounded-full animate-pulse"
        }),
        React.createElement('h3', {
          key: 'title',
          className: "text-lg font-semibold text-yellow-300"
        }, "Component Compilation Failed")
      ]),
      React.createElement('p', {
        key: 'description',
        className: "text-yellow-200 mb-3"
      }, [
        "Failed to compile component: ",
        React.createElement('code', {
          key: 'code',
          className: "bg-yellow-500/30 px-2 py-1 rounded"
        }, type)
      ]),
      React.createElement('details', {
        key: 'details',
        className: "text-sm"
      }, [
        React.createElement('summary', {
          key: 'summary',
          className: "cursor-pointer text-yellow-300 hover:text-yellow-200"
        }, "View Generated Code"),
        React.createElement('pre', {
          key: 'pre',
          className: "mt-2 p-3 bg-gray-800 rounded text-xs overflow-x-auto"
        }, [
          React.createElement('code', {
            key: 'code-block',
            className: "text-gray-300"
          }, code)
        ])
      ]),
      React.createElement('div', {
        key: 'props',
        className: "mt-3 p-3 bg-gray-800/50 rounded"
      }, [
        React.createElement('p', {
          key: 'props-text',
          className: "text-xs text-gray-400"
        }, `Props received: ${JSON.stringify(props, null, 2)}`)
      ])
    ]);
  };
}

/**
 * Batch compile and register multiple generated components
 */
export function compileAndRegisterComponents(generatedComponents: GeneratedComponent[]): {
  success: string[];
  failed: string[];
} {
  const successList: string[] = [];
  const failedList: string[] = [];
  
  generatedComponents.forEach(genComponent => {
    const compilationSuccess = compileAndRegisterComponent(genComponent);
    if (compilationSuccess) {
      successList.push(genComponent.type);
    } else {
      failedList.push(genComponent.type);
    }
  });
  
  return { success: successList, failed: failedList };
}

/**
 * Clear all dynamically registered components
 */
export function clearDynamicComponents(): void {
  dynamicComponentRegistry.clear();
  console.log('Cleared all dynamic components');
}

/**
 * Get all registered dynamic component types
 */
export function getRegisteredDynamicComponentTypes(): string[] {
  return Array.from(dynamicComponentRegistry.keys());
} 